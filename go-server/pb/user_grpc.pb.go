// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyServiceClient is the client API for MyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyServiceClient interface {
	ReadUser(ctx context.Context, in *ReadUserReq, opts ...grpc.CallOption) (*ReadUserRes, error)
	Channel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (MyService_ChannelClient, error)
	Log(ctx context.Context, opts ...grpc.CallOption) (MyService_LogClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (MyService_ChatClient, error)
}

type myServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyServiceClient(cc grpc.ClientConnInterface) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) ReadUser(ctx context.Context, in *ReadUserReq, opts ...grpc.CallOption) (*ReadUserRes, error) {
	out := new(ReadUserRes)
	err := c.cc.Invoke(ctx, "/user.MyService/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) Channel(ctx context.Context, in *ChannelReq, opts ...grpc.CallOption) (MyService_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyService_ServiceDesc.Streams[0], "/user.MyService/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &myServiceChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyService_ChannelClient interface {
	Recv() (*ChannelRes, error)
	grpc.ClientStream
}

type myServiceChannelClient struct {
	grpc.ClientStream
}

func (x *myServiceChannelClient) Recv() (*ChannelRes, error) {
	m := new(ChannelRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myServiceClient) Log(ctx context.Context, opts ...grpc.CallOption) (MyService_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyService_ServiceDesc.Streams[1], "/user.MyService/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &myServiceLogClient{stream}
	return x, nil
}

type MyService_LogClient interface {
	Send(*LogReq) error
	CloseAndRecv() (*LogRes, error)
	grpc.ClientStream
}

type myServiceLogClient struct {
	grpc.ClientStream
}

func (x *myServiceLogClient) Send(m *LogReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myServiceLogClient) CloseAndRecv() (*LogRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (MyService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyService_ServiceDesc.Streams[2], "/user.MyService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &myServiceChatClient{stream}
	return x, nil
}

type MyService_ChatClient interface {
	Send(*ChatReq) error
	Recv() (*ChatRes, error)
	grpc.ClientStream
}

type myServiceChatClient struct {
	grpc.ClientStream
}

func (x *myServiceChatClient) Send(m *ChatReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myServiceChatClient) Recv() (*ChatRes, error) {
	m := new(ChatRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyServiceServer is the server API for MyService service.
// All implementations should embed UnimplementedMyServiceServer
// for forward compatibility
type MyServiceServer interface {
	ReadUser(context.Context, *ReadUserReq) (*ReadUserRes, error)
	Channel(*ChannelReq, MyService_ChannelServer) error
	Log(MyService_LogServer) error
	Chat(MyService_ChatServer) error
}

// UnimplementedMyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMyServiceServer struct {
}

func (UnimplementedMyServiceServer) ReadUser(context.Context, *ReadUserReq) (*ReadUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (UnimplementedMyServiceServer) Channel(*ChannelReq, MyService_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (UnimplementedMyServiceServer) Log(MyService_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedMyServiceServer) Chat(MyService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

// UnsafeMyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyServiceServer will
// result in compilation errors.
type UnsafeMyServiceServer interface {
	mustEmbedUnimplementedMyServiceServer()
}

func RegisterMyServiceServer(s grpc.ServiceRegistrar, srv MyServiceServer) {
	s.RegisterService(&MyService_ServiceDesc, srv)
}

func _MyService_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.MyService/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).ReadUser(ctx, req.(*ReadUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChannelReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyServiceServer).Channel(m, &myServiceChannelServer{stream})
}

type MyService_ChannelServer interface {
	Send(*ChannelRes) error
	grpc.ServerStream
}

type myServiceChannelServer struct {
	grpc.ServerStream
}

func (x *myServiceChannelServer) Send(m *ChannelRes) error {
	return x.ServerStream.SendMsg(m)
}

func _MyService_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyServiceServer).Log(&myServiceLogServer{stream})
}

type MyService_LogServer interface {
	SendAndClose(*LogRes) error
	Recv() (*LogReq, error)
	grpc.ServerStream
}

type myServiceLogServer struct {
	grpc.ServerStream
}

func (x *myServiceLogServer) SendAndClose(m *LogRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myServiceLogServer) Recv() (*LogReq, error) {
	m := new(LogReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MyService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyServiceServer).Chat(&myServiceChatServer{stream})
}

type MyService_ChatServer interface {
	Send(*ChatRes) error
	Recv() (*ChatReq, error)
	grpc.ServerStream
}

type myServiceChatServer struct {
	grpc.ServerStream
}

func (x *myServiceChatServer) Send(m *ChatRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myServiceChatServer) Recv() (*ChatReq, error) {
	m := new(ChatReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyService_ServiceDesc is the grpc.ServiceDesc for MyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadUser",
			Handler:    _MyService_ReadUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _MyService_Channel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Log",
			Handler:       _MyService_Log_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _MyService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/user.proto",
}
